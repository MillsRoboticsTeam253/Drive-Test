// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc253.driveTest;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.util.ArrayList;

import org.usfirst.frc253.driveTest.commands.*;
import org.usfirst.frc253.driveTest.profiles.Constants;
import org.usfirst.frc253.driveTest.profiles.MotionProfileData;
import org.usfirst.frc253.driveTest.profiles.ProfileLib;
import org.usfirst.frc253.driveTest.subsystems.*;

import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Sensors sensors;
    public static Intake intake;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATION
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public static SendableChooser<ArrayList<MotionProfileData>> pathChooser;
    
    public static SendableChooser<Double> propChanger;
    public static SendableChooser<Double> derivChanger;
    
    public void robotInit() {
    RobotMap.init();
	    pathChooser = new SendableChooser<ArrayList<MotionProfileData>>();
	    pathChooser.addDefault("Straight Ten Feet", ProfileLib.straightTenFeet);
	    pathChooser.addObject("Right To Switch", ProfileLib.rightToSwitch);
	    pathChooser.addObject("Middle to SwitchR", ProfileLib.middletoSwitchR);
	    pathChooser.addObject("testrighttoswitch", ProfileLib.testrighttoswitch);
	    pathChooser.addObject("Newer Right To Switch", ProfileLib.newerRightToSwitch);
	    pathChooser.addObject("Newerer Right To Switch", ProfileLib.newererRightToSwitch);
	    pathChooser.addObject("UDriveRightToSwich",ProfileLib.UDriveRtoRSwitch);
	    pathChooser.addObject("UDriveRightToSwichNEW",ProfileLib.UDriveRRSnew);
	    pathChooser.addObject("CDrive",ProfileLib.CDriveRtoRS);
	    pathChooser.addObject("CDriveCent",ProfileLib.CDriveRtoRScent);
	    pathChooser.addObject("rightToScale",ProfileLib.rightToScale);
	    pathChooser.addObject("FieldRToRScale",ProfileLib.RtoRSwitch);
	    pathChooser.addObject("LToLSwitch", ProfileLib.LToLSwitch);
	    pathChooser.addObject("LToLScale", ProfileLib.LToLScale);
	    SmartDashboard.putData("Path Chooser", pathChooser);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	    propChanger = new SendableChooser<Double>();
	    propChanger.addObject("+0.1", 0.1);
	    propChanger.addObject("+0.05", 0.05);
	    propChanger.addObject("+0.01", 0.01);
	    propChanger.addDefault("0 (P Gain)", 0.0);
	    propChanger.addObject("-0.01", -0.01);
	    propChanger.addObject("-0.05", -0.05);
	    propChanger.addObject("-0.1", -0.1);
	    SmartDashboard.putData("Proportional Changer", propChanger);
	    
	    derivChanger = new SendableChooser<Double>();
	    derivChanger.addObject("+10", 10.0);
	    derivChanger.addObject("+5", 5.0);
	    derivChanger.addObject("+1", 1.0);
	    derivChanger.addDefault("0 (D Gain)", 0.0);
	    derivChanger.addObject("-1", -1.0);
	    derivChanger.addObject("-5", -5.0);
	    derivChanger.addObject("-10", -10.0);
	    SmartDashboard.putData("Derivative Changer", derivChanger);
	    
        driveTrain = new DriveTrain();
        sensors = new Sensors();
        intake = new Intake();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	
    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
